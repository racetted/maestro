# configuration section for maestro
Set_ex="-ex"
seqno=""
keep="keep"
SelfJobRemove="true"
if [[ "${USER}" = "afsiops" || "${USER}" = "afsipar" ]]; then
   # send email to cmois when job is deleted
   mail="cmois@ec.gc.ca"
fi

# these two users are always op on every cluster
[[ "${USER}" = "afsiops" || "${USER}" = "afseeer" ]] && OperationalUser="yes"

# afsipar is not op on p7
[[ "${USER}" = "afsipar" && "${d:-${mach}}" != "spica" && "${d:-${mach}}" != "hadar" ]] && OperationalUser="yes"

test "$clone" != "0" && FatalError "Cannot clone when running with maestro"
test "{jn}"  = ""  && FatalError "job name is mandatory with maestro"

#temporarily replace jn to remove caret, PBS 19.2 restriction 
jn=$(echo $jn | sed 's/\^/-/g')

if [[ "${SEQ_BIN}" = "" ]]; then
   test $(which maestro) && SEQ_BIN=$(dirname `which maestro`) || FatalError "SEQ_BIN not set properly, can't find path to sequencer binaries!"
fi

if [[ "${SEQ_UTILS_BIN}" = "" ]]; then
   test $(which nodetracer) && SEQ_UTILS_BIN$(dirname `which nodetracer`) || FatalError "SEQ_UTILS_BIN not set properly, can't find path to sequencer utilities!"
fi

echo "Using SEQ_BIN=${SEQ_BIN}"
echo "Using SEQ_UTILS_BIN=${SEQ_UTILS_BIN}"

eval "$(grep SEQ_DATE ${jobcfg})"
if [[ "${SEQ_DATE}" = "" ]]; then
   FatalError "SEQ_DATE env variable not set!"
fi

function Sys_ErrorTrap
{
   printf "${SEQ_BIN}/nodelogger -n ${node} -s abort -m \"ord_soumet failed status=$1 on `hostname`\" LastErrorMessage=${LastErrorMessage}"
   loopArgs=""
   # fetch the SEQ_LOOP_ARGS from the given job cfg file
   if [[ -r "${jobcfg}" ]] ; then
      # grep SEQ_LOOP_ARGS from cfg | get everything after first equal | remove double quotes
      loopArgs=$(grep SEQ_LOOP_ARGS ${jobcfg} | cut -d '=' -f 2- | cut -d '"' -f 2)
   fi

   ${SEQ_BIN}/nodelogger -n "${node}" ${loopArgs} -s abort -m "ord_soumet failed on `hostname`. Check submission listing. ${LastErrorMessage}"
   exit 1
}

function Sys_SwitchUser
{
   echo "executing ${0##*/} ${RememberedArgs} as user ${as}"
   ExportExpPath="export SEQ_EXP_HOME=${SEQ_EXP_HOME}"
   echo "${ExportExpPath};${0} ${RememberedArgs}" | ssh -oBatchMode=yes -oStrictHostKeyChecking=no ${as}@${TRUE_HOST} bash --login || FatalError "ssh ${as}@${TRUE_HOST} failed"
   trap "" 0
   exit 0
}

function Sys_SelfResubmit
{
   echo Sys_SelfResubmit  > /dev/null
}

# This function is removed by making it do nothing.
function Sys_GridEngineHeader
{
   # test "${SEQ_EXP_HOME}" != "" && GE_SystemPath=" -v SEQ_EXP_HOME=${SEQ_EXP_HOME}"
   true
}

# This function is removed by making it do nothing.
function Sys_LoadLevelerHeader
{
   # test "${SEQ_EXP_HOME}" != "" && LL_SystemPath="export SEQ_EXP_HOME=\"${SEQ_EXP_HOME}\""
   true
}

function Sys_NoCfgError
{
   echo warning: cannot find configuration file ${1}. Using default. 
}

# This function is removed by making it do nothing.
function Sys_JobHeader
{
   # test "${SEQ_EXP_HOME}" != "" && SystemPath="export SEQ_EXP_HOME=${SEQ_EXP_HOME}"
   true
}

function Sys_AddWrapperHeader
{
   jobname=$1
   dest_file=$2
   listing_dir=$3
   set -ex 
   cat >> ${dest_file} << END

if [[ "\${SEQ_LOOP_EXT}" == "" ]] ; then  
   jobout=${listing_dir}/\${SEQ_NAME}.${SEQ_DATE}.pgmout\${JOB_ID}.\$$
else
   jobout=${listing_dir}/\${SEQ_NAME}.\${SEQ_LOOP_EXT}.${SEQ_DATE}.pgmout\${JOB_ID}.\$$
fi
set ${Set_ex}
exec 2>\$jobout >> \$jobout 1>&2
END
}

function Sys_AddWrapper
{
   jobname=$1
   source_file=$2
   dest_file=$3
   listing_dir=$4
   trap_arch=${5:-LINUX}
   config_dir=$6
   set -ex 
   Sys_AddWrapperHeader ${jobname} ${dest_file} ${listing_dir}
   seqBegin="\${SEQ_BIN}/maestro -s begin -n \${SEQ_NODE} -f \${SEQ_XFER} \${SEQ_LOOP_ARGS}"
   seqEnd="\${SEQ_BIN}/maestro -s end -n \${SEQ_NODE} -f \${SEQ_XFER} \${SEQ_LOOP_ARGS}"
  ## topWrapper=${ConfigFile%/*}/wrappers/${sys}.${trap_arch}.${silentPrefix}trap_top
  ## bottomWrapper=${ConfigFile%/*}/wrappers/${sys}.${trap_arch}.trap_bottom
   [[ -f ${config_dir}/wrappers/${sys}.${trap_arch}.trap_top ]] && topWrapper=${config_dir}/wrappers/${sys}.${trap_arch}.trap_top || topWrapper=${altcfgdir}/wrappers/${sys}.${trap_arch}.trap_top
   [[ -f ${config_dir}/wrappers/${sys}.${trap_arch}.trap_bottom ]] && bottomWrapper=${config_dir}/wrappers/${sys}.${trap_arch}.trap_bottom || bottomWrapper=${altcfgdir}/wrappers/${sys}.${trap_arch}.trap_bottom

   # add the trap
   cat ${topWrapper} >> ${dest_file}

   printf "\n printf \"Starting \$SEQ_NODE \$(date) JOB_ID=\${JOB_ID:-\${LOADL_STEP_ID}} \\n \\n \" " >> ${dest_file}
 
   printf "\n cd \${TMPDIR}" >> ${dest_file}
   printf "\n${seqBegin}" >> ${dest_file}

   if [[ -f ${SEQ_UTILS_BIN}/chaindot.py ]] ; then 

       #check if task setup must be run
       printf "\n SEQ_NODE_TYPE=\$(\${SEQ_BIN}/nodeinfo -n \$SEQ_NODE -f type)" >>  ${dest_file}
       printf "\n if [[ \${SEQ_NODE_TYPE} = 'node.type=Task' ||  \${SEQ_NODE_TYPE} = 'node.type=NpassTask' ]] ; then " >>  ${dest_file}

       [[ "immediate" = "${immediate}" ]] && printf "\n \t export JOB_IMMEDIATE_MODE=1" >>  ${dest_file}

       # add the task setup and chaindot utilities
       printf "\n \t \${SEQ_UTILS_BIN}/chaindot.py -e \${SEQ_EXP_HOME} -n \${SEQ_NODE} -o \${SEQ_TMP_CFG}.complete" >>  ${dest_file}
       #default workbase value
       printf "\n \t export SEQ_WORKBASE=\$(\${SEQ_UTILS_BIN}/nodework -n \${SEQ_NODE} \${SEQ_LOOP_ARGS} -base | cut -d ':' -f 2)" >> ${dest_file}
       printf "\n if [[ -d \${SEQ_WORKBASE} ]]; then " >> ${dest_file}
       printf "\n \t touch \${SEQ_WORKBASE}" >> ${dest_file}
       printf "\n else " >> ${dest_file}
       printf "\n \t mkdir -p \$SEQ_WORKBASE" >>  ${dest_file}
       printf "\n fi" >> ${dest_file}

       #run task_setup
       printf "\n \t . \${SEQ_UTILS_BIN}/task_setup.dot -f \${SEQ_TMP_CFG}.complete --base \$(nodework -n \${SEQ_NODE} \${SEQ_LOOP_ARGS} | cut -d ':' -f 2) --clean --verbose --force" >>  ${dest_file}
       printf "\n \t cd \${TASK_WORK} " >>  ${dest_file}

       #end of task_setup check
       printf "\n fi" >>  ${dest_file}

   fi

   # dot the job content
   printf "\n printf \"USER CODE BEGINS \\n \" " >> ${dest_file}
   printf "\n printf \" #____________________________________________________________#\\n \" " >> ${dest_file}
   printf "\n. ${job_with_wrapper} ${args}" >> ${dest_file}
   printf "\n printf \" #____________________________________________________________#\\n \" " >> ${dest_file}
   printf "\n printf \"USER CODE ENDS \\n \" " >> ${dest_file}

   # dot the job content
   printf "\n set -x" >> ${dest_file}

   # add the maestro end tag if needed
   if [[ "${noendwrap}" = "y" ]] ; then
      printf "\n\n${seqEnd}" >> ${dest_file}
   fi

   printf "\n printf \" Ending \$SEQ_NODE \$(date) \\n \" " >> ${dest_file}

   # add the trap end processing
   cat "${bottomWrapper}" >> ${dest_file}
}

function Sys_CreateDirs
{
   container="${node%/*}"
   test -z "${container}" && container="${node}"
   for target in wrapped batch jobinfo tmpfile; do 
      test "${container}" != "" && target="${target}${container}"
      mkdir -p ${wrapdir}/${target}
      test -d  ${wrapdir}/${target}        || FatalError "Cannot access directory '${wrapdir}/${target}'"
   done
}

function Sys_SetWrapFiles
{
    container="${node%/*}"
    
# testcode for using a longer jobname
#   loopext=$(grep SEQ_LOOP_EXT ${jobcfg})
#   loopext=${loopext#*=}
#   loopext=${loopext#*\"}
#   loopext=${loopext%\"}
#   loopext=${loopext%%^last\"}
#   test -n "${loopext}" && loopext=".${loopext}"
# 
#   job_with_wrapper=${job_with_wrapper_dir}${node}${loopext}.wrapped.${SEQ_DATE}.${ppid}-${mach}-$(date +%F%T | sed 's/[-:]//g')
#   job_batch=${job_batch_dir}${node}${loopext}.${SEQ_DATE}.${ppid}-${mach}-$(date +%F%T | sed 's/[-:]//g')
#   LaJobLink=${job_batch_dir}${node}${loopext}-${mach}.link
   seqname=$(grep "SEQ_NAME=" ${jobcfg})
   seqname=${seqname#*=}
   seqext=$(grep "SEQ_LOOP_EXT=" ${jobcfg})
   eval seqext=${seqext#*=}
   if [[ $seqext == "" ]] ; then 
      fullname=$seqname
   else
      fullname=$seqname.$seqext
   fi 
   jnPrefix=`${SEQ_BIN}/getdef resources SEQ_JOBNAME_PREFIX 2>/dev/null` || jnPrefix=""
   jnNoPrefix=${jn##$jnPrefix}
   job_with_wrapper=${job_with_wrapper_dir}${container}/${fullname}.wrapped.${SEQ_DATE}.${ppid}-${mach}-$(date +%F%T | sed 's/[-:]//g')
   job_batch=${job_batch_dir}${container}/${fullname}.${SEQ_DATE}.${ppid}-${mach}-$(date +%F%T | sed 's/[-:]//g')
   LaJobLink=${job_batch_dir}${container}/${jnNoPrefix}-${mach}.link
}

# this exports a command that will remove the generated task system id
function Sys_SetJobRemove 
{
  container="${node%/*}"
  export SelfJobRemove="rm -f ${job_info_dir}/${container}/${SEQ_DATE}@\${JOB_ID:-\${LOADL_STEP_ID%.*}} >/dev/null 2>&1 || true "
}

# moves the job info file  at the correct container level
function Sys_PostSubmit
{
   container="${node%/*}"
   #create right jobinfo link, remove old reference. system_job_id = $SgeCell $jn 
   #
   ln -s "$SgeCell $jnNoPrefix" ${job_info_dir}/${container}/${SEQ_DATE}@${system_job_id}
   rm -f ${job_info_dir}/${system_job_id} 

}
